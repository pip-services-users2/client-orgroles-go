// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/orgroles_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgRolesClient is the client API for OrgRoles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgRolesClient interface {
	GetOrganizationAdmins(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*UserIdsReply, error)
	GetOrganizationUsers(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*UserIdsReply, error)
	GetOrganizationUserRoles(ctx context.Context, in *RolesListRequest, opts ...grpc.CallOption) (*RolesListReply, error)
	GrantOrgRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*RolesReply, error)
	RevokeOrgRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*RolesReply, error)
	GrantDemoOrganizationUserRole(ctx context.Context, in *DemoOrganizationRequest, opts ...grpc.CallOption) (*OrgIdReply, error)
}

type orgRolesClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgRolesClient(cc grpc.ClientConnInterface) OrgRolesClient {
	return &orgRolesClient{cc}
}

func (c *orgRolesClient) GetOrganizationAdmins(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*UserIdsReply, error) {
	out := new(UserIdsReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/get_organization_admins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgRolesClient) GetOrganizationUsers(ctx context.Context, in *OrgIdRequest, opts ...grpc.CallOption) (*UserIdsReply, error) {
	out := new(UserIdsReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/get_organization_users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgRolesClient) GetOrganizationUserRoles(ctx context.Context, in *RolesListRequest, opts ...grpc.CallOption) (*RolesListReply, error) {
	out := new(RolesListReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/get_organization_user_roles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgRolesClient) GrantOrgRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*RolesReply, error) {
	out := new(RolesReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/grant_org_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgRolesClient) RevokeOrgRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*RolesReply, error) {
	out := new(RolesReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/revoke_org_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgRolesClient) GrantDemoOrganizationUserRole(ctx context.Context, in *DemoOrganizationRequest, opts ...grpc.CallOption) (*OrgIdReply, error) {
	out := new(OrgIdReply)
	err := c.cc.Invoke(ctx, "/orgroles_v1.OrgRoles/grant_demo_organization_user_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgRolesServer is the server API for OrgRoles service.
// All implementations must embed UnimplementedOrgRolesServer
// for forward compatibility
type OrgRolesServer interface {
	GetOrganizationAdmins(context.Context, *OrgIdRequest) (*UserIdsReply, error)
	GetOrganizationUsers(context.Context, *OrgIdRequest) (*UserIdsReply, error)
	GetOrganizationUserRoles(context.Context, *RolesListRequest) (*RolesListReply, error)
	GrantOrgRole(context.Context, *UserRoleRequest) (*RolesReply, error)
	RevokeOrgRole(context.Context, *UserRoleRequest) (*RolesReply, error)
	GrantDemoOrganizationUserRole(context.Context, *DemoOrganizationRequest) (*OrgIdReply, error)
	mustEmbedUnimplementedOrgRolesServer()
}

// UnimplementedOrgRolesServer must be embedded to have forward compatible implementations.
type UnimplementedOrgRolesServer struct {
}

func (UnimplementedOrgRolesServer) GetOrganizationAdmins(context.Context, *OrgIdRequest) (*UserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationAdmins not implemented")
}
func (UnimplementedOrgRolesServer) GetOrganizationUsers(context.Context, *OrgIdRequest) (*UserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUsers not implemented")
}
func (UnimplementedOrgRolesServer) GetOrganizationUserRoles(context.Context, *RolesListRequest) (*RolesListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUserRoles not implemented")
}
func (UnimplementedOrgRolesServer) GrantOrgRole(context.Context, *UserRoleRequest) (*RolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantOrgRole not implemented")
}
func (UnimplementedOrgRolesServer) RevokeOrgRole(context.Context, *UserRoleRequest) (*RolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOrgRole not implemented")
}
func (UnimplementedOrgRolesServer) GrantDemoOrganizationUserRole(context.Context, *DemoOrganizationRequest) (*OrgIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantDemoOrganizationUserRole not implemented")
}
func (UnimplementedOrgRolesServer) mustEmbedUnimplementedOrgRolesServer() {}

// UnsafeOrgRolesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgRolesServer will
// result in compilation errors.
type UnsafeOrgRolesServer interface {
	mustEmbedUnimplementedOrgRolesServer()
}

func RegisterOrgRolesServer(s grpc.ServiceRegistrar, srv OrgRolesServer) {
	s.RegisterService(&OrgRoles_ServiceDesc, srv)
}

func _OrgRoles_GetOrganizationAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).GetOrganizationAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/get_organization_admins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).GetOrganizationAdmins(ctx, req.(*OrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgRoles_GetOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).GetOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/get_organization_users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).GetOrganizationUsers(ctx, req.(*OrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgRoles_GetOrganizationUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).GetOrganizationUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/get_organization_user_roles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).GetOrganizationUserRoles(ctx, req.(*RolesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgRoles_GrantOrgRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).GrantOrgRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/grant_org_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).GrantOrgRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgRoles_RevokeOrgRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).RevokeOrgRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/revoke_org_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).RevokeOrgRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgRoles_GrantDemoOrganizationUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgRolesServer).GrantDemoOrganizationUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orgroles_v1.OrgRoles/grant_demo_organization_user_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgRolesServer).GrantDemoOrganizationUserRole(ctx, req.(*DemoOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgRoles_ServiceDesc is the grpc.ServiceDesc for OrgRoles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgRoles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orgroles_v1.OrgRoles",
	HandlerType: (*OrgRolesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_organization_admins",
			Handler:    _OrgRoles_GetOrganizationAdmins_Handler,
		},
		{
			MethodName: "get_organization_users",
			Handler:    _OrgRoles_GetOrganizationUsers_Handler,
		},
		{
			MethodName: "get_organization_user_roles",
			Handler:    _OrgRoles_GetOrganizationUserRoles_Handler,
		},
		{
			MethodName: "grant_org_role",
			Handler:    _OrgRoles_GrantOrgRole_Handler,
		},
		{
			MethodName: "revoke_org_role",
			Handler:    _OrgRoles_RevokeOrgRole_Handler,
		},
		{
			MethodName: "grant_demo_organization_user_role",
			Handler:    _OrgRoles_GrantDemoOrganizationUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/orgroles_v1.proto",
}
